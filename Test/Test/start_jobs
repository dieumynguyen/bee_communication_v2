#! /usr/bin/perl

$cpuminutes=1.0; #1.0*60.0; # limit running time of the simulation (in minutes)
$cpucentiseconds=$cpuminutes*100*60;

################################################################################################
# define parameters
@as = ("0.34","0.68");
@bs = ("1.34","1.68");
@cs = ("2.34","2.68");


################################################################################################
foreach $a (@as){
    foreach $b (@bs) {
        foreach $c (@cs) {
            $job_name = "Test_a$a.b$b.c$c";
            $exe="test($a,$b,$c)";
            $exefile = "test.m";
            $script_name = "run_script";
            
            print "job name $job_name\n";
            print "script_name = $script_name\n";
            
            open (MYFILE, ">>$script_name");
            print MYFILE "#!/bin/bash\n";
            print MYFILE "#SBATCH -J $job_name\n"; #Job's name
            print MYFILE "#SBATCH -n 1\n"; #Number of cores
            print MYFILE "#SBATCH -t $cpuminutes\n"; # #Runtime in minutes
            print MYFILE "#SBATCH -p short\n"; #Partition to submit to
            print MYFILE "#SBATCH --mem-per-cpu=600\n"; #Memory per cpu in MB (see also --mem)
            print MYFILE "#SBATCH -o $script_name.out\n"; #
            print MYFILE "#SBATCH -e $script_name.err\n"; #
            print MYFILE "module load matlab/R2017b\n";
            print MYFILE "matlab -nojvm -nodisplay -nosplash -r \"$exe\"\n";
            close (MYFILE);
            
            if (! -e $job_name) {mkdir($job_name)}
            
            print `mv $script_name $job_name`;
            print `cp $exefile $job_name`;
            print `cd $job_name; chmod 777 $script_name`;
            print `cd $job_name; sbatch ./$script_name`;
        }
    }
}




#sleep(5);

